#!/usr/bin/env python

from sys import argv, stdout
from os import putenv
from os.path import basename
from string import join
import logging

from svnfiltereddump import *

console_handler = None

def create_config_from_parameters():
    config = Config(argv[1:])
    interesting_paths = InterestingPaths()
    for path in config.include_paths:
        interesting_paths.mark_path_as_interesting(path)
    for path in config.exclude_paths:
        interesting_paths.mark_path_as_boring(path)
    return ( config, interesting_paths)

def setup_early_logging():
    global console_handler
    logger = logging.getLogger()
    logger.setLevel(logging.DEBUG)
    console_formatter = logging.Formatter('%(levelname)s %(message)s')
    console_handler = logging.StreamHandler()
    console_handler.setLevel(logging.INFO)
    console_handler.setFormatter(console_formatter)
    logger.addHandler(console_handler)
    

def setup_final_logging(config):
    if config.quiet:
        console_handler.setLevel(logging.WARNING)
    
    if config.log_file:
        log_name = basename(argv[0])
        log_file_formatter = logging.Formatter('%(asctime)s ' + log_name + ' %(levelname)s %(message)s')
        log_file_handler = logging.FileHandler(config.log_file)
        log_file_handler.setLevel(logging.DEBUG)
        log_file_handler.setFormatter(log_file_formatter)
        logger = logging.getLogger()
        logger.addHandler(log_file_handler)

setup_early_logging()
( config, interesting_paths ) = create_config_from_parameters()
setup_final_logging(config)
logging.info("Command line: " + join(argv, ' '))

# Make sure that:
# 1) We get english error messages
# 2) We have no encoding issues in the output/input of SVN commands
putenv('LANG', 'en_US.utf8')

source_repository = SvnRepository(config.source_repository)

dump_writer = SvnDumpWriter(stdout)
lump_post_processor = LumpPostProcessor(config, dump_writer)
lump_builder = LumpBuilder(source_repository, interesting_paths, lump_post_processor)
parent_directory_lump_generator = ParentDirectoryLumpGenerator(interesting_paths, lump_builder)
lump_post_processor.parent_directory_lump_generator = parent_directory_lump_generator

revision_handlers_hash = {
    STRATEGY_DUMP_HEADER:           DumpHeaderGenerator(lump_builder),
    STRATEGY_IGNORE:                RevisionIgnorer(lump_builder),
    STRATEGY_SYNTHETIC_DELETES:     SyntheticDeleter(source_repository, lump_builder),
    STRATEGY_DUMP_SCAN:             DumpFilter(config, source_repository, interesting_paths, lump_builder),
    STRATEGY_BOOTSTRAP:             BootsTrapper(config, source_repository, interesting_paths, lump_builder)
}

controller = DumpController(
    config = config,
    repository = source_repository,
    interesting_paths = interesting_paths,
    revision_handlers_by_strategy = revision_handlers_hash
)

controller.run()
